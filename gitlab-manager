#!/usr/bin/env python3

import argparse
import gitlab
import logging as log
from requests import exceptions

class MergeRequest:
    def __init__(self, mr, label_prefix='CL', label_sep=':'):
        self.Id = mr.iid
        self.Author = mr.author['username']
        self.Title = mr.title
        self.Description = mr.description
        self.Label = "info"
        self.LabelPrefix = label_prefix
        self.LabelSeparator = label_sep
        if len(mr.labels) == 1:
            self.Label = "[{}]".format(mr.labels[0])
        else:
            for label in mr.labels:
                if label.startswith(self.LabelPrefix+self.LabelSeparator):
                    self.Label = f"[{label.split(self.LabelSeparator, maxsplit=1)[-1].strip()}]"
                    break

    def print_mr(self, ids_only=False):
        if ids_only:
            return f"{self.Id} "
        else:
            out =  f"### {self.Label}: {self.Title}\n\n"
            out += f"{self.Description}\n\n"
            out += f"    * by: {self.Author}  \n"
            out += f"    * Merge Request ID: !{self.Id}  \n\n"
            return out

def list_mrs(project, args):
    if not args.output_ids:
        print("\nHere is the list of MRs for your chosen project:\n")
    labels = [item for item in args.labels.split(',')]
    mrs = []
    if len(labels) > 0:
        mrs = project.mergerequests.list(state=args.state, order_by='updated_at', wip=args.wip, labels=labels, all=True)
    else:
        mrs = project.mergerequests.list(state=args.state, order_by='updated_at', wip=args.wip)
    all_mr = ""
    for mr in mrs:
        current = MergeRequest(mr, args.cl_type_label_prefix, args.cl_type_label_separator)
        all_mr = all_mr + "{}\n\n".format(current.print_mr(args.output_ids))
    print(all_mr)
    return all_mr

def update_mr(project, args):
    mrs = project.mergerequests.list(query_parameters={'iids[]': ','.join(args.mr_ids)})
    for mr in mrs:
        if args.label is not None and args.label not in mr.labels:
            if args.replace_existing_labels:
                log.info(f"    * Replacing all labels with '{args.label}' in MR !{mr.iid}")
                mr.labels = [args.label]
            else:
                log.info(f"    * Appending label '{args.label}' to MR !{mr.iid}")
                mr.labels.append(args.label)
        if args.tag is not None:
            milestone = None
            milestones = project.milestones.list(state='active', search=args.tag)
            if len(milestones) == 1:
                milestone = milestones[0]
            elif len(milestones) == 0:
                log.info(f"Create milestone {args.tag}")
                if args.force:
                    milestone = project.milestones.create({'title': args.tag})
            else:
                print("please verify your tag")
                exit()
            if milestone is not None:
                mr.milestone_id = milestone.id
        if args.force:
            mr.save()

def fetch_release_milestone(project, milestone):
    release_milestones = project.milestones.list(title=milestone)
    if len(release_milestones) == 0:
        log.error(f"Release milestone {milestone} not found in project {project.name} ({args.project})")
        return None
    elif len(release_milestones) > 1:
        log.error(f"Ambiguous release milestone '{milestone}' found in project '{project.name} ({args.project})': {', '.join([item.title for item in release_milestones])}")
        return None
    return release_milestones[0]

def collect_mr(group, project, args):
    release_milestone = fetch_release_milestone(project, args.release_milestone)
    if release_milestone is None:
        if args.force:
            log.info(f"Creating release milestone {args.release_milestone} in project {project.name} ({project.id})")
            release_milestone = project.milestones.create({'title': args.release_milestone})
        else:
            log.error("Cannot continue without release milestone")
            exit()

    log.info(f"Collecting merged MRs for closed issues in sprints: {', '.join(args.sprint_milestones)}")
    mr_ids = []
    for sprint in args.sprint_milestones:
        milestones = group.milestones.list(title=sprint)
        if len(milestones) == 0:
            log.warning(f"Sprint milestone '{sprint}' not found in group '{group.name} ({args.group_id})'")
            continue
        elif len(milestones) > 1:
            log.error(f"Ambiguous sprint milestone '{sprint}' found in group '{group.name} ({args.group_id})': {', '.join([item.title for item in milestones])}")
            exit()
        issues = milestones[0].issues()
        for i in issues:
            if i.state != 'closed' or i.project_id != project.id:
                continue
            project_issue = project.issues.get(i.iid)
            related_mrs = project_issue.related_merge_requests()
            for current_mr in related_mrs:
                if current_mr['state'] != 'merged' or current_mr['project_id'] != project.id:
                    continue
                log.info(f"   * !{current_mr['iid']} ({current_mr['title']})")
                mr_ids.append(str(current_mr['iid']))

    log.info(f"Fetching MR objects for ids: {', '.join(mr_ids)}")
    mrs = project.mergerequests.list(query_parameters={'iids[]': ','.join(mr_ids)})
    for current_mr in mrs:
        log.info(f"    * Assigning release milestone {release_milestone.title} ({release_milestone.id}) to MR !{current_mr.iid} ({current_mr.title})")
        current_mr.milestone_id = release_milestone.id
        if args.force:
            current_mr.save()

def print_changelog(project, args, push=False):
    if args.changelog_title is not None:
        print(f"\n{args.changelog_title}\n\n")
    else:
        print("\nYour changelog for {} on Project {}:\n".format(args.tag, project.name))
    mrs = project.mergerequests.list(order_by='updated_at', milestone=args.tag)
    all_mr = ""
    for mr in mrs:
        current = MergeRequest(mr)
        all_mr = all_mr + "{}\n\n------------------\n\n".format(current.print_mr())
    print(all_mr)
    if push:
        log.info(f"Create release '{args.tag}': {all_mr}")
        if args.force:
                 project.releases.create({'name': str(args.tag), 'tag_name': args.tag, 'description': all_mr})



def init_argparse():
    try:
        parser = argparse.ArgumentParser(prog='gitlab-manager', description='manage gitlab api mr and changelog')
        # Optionals
        '''override defaults or configuration'''
        parser.add_argument("project")
        optionals = parser.add_argument_group()
        optionals.add_argument("--gitlab-url",
                               help='Specify gitlab url ex: https://gitlab.com')
        optionals.add_argument("--gitlab-token",
                               help='Specify private gitlab token')
        optionals.add_argument("-q", "--quiet", action='store_true',
                               help='No diagnostic messages')
        optionals.add_argument('--log-format', type=str, default='%(message)s',
                               help='Python log format string')
        optionals.add_argument("-f", "--force", action='store_true',
                               help='Perform changes instead of doing a DRY run')
        optionals.add_argument("--changelog-title",
                               help='Changelog title')
        optionals.add_argument("--changelog-type-label-prefix", dest='cl_type_label_prefix',
                               default='CL',
                               help='Gitlab label prefix for changelog entry types')
        optionals.add_argument("--changelog-type-label-separator", dest='cl_type_label_separator',
                               default=':',
                               help='seperator token of Gitlab label prefixes for changelog entry types')
        optionals.add_argument("--product-label-prefix", dest='product_label_prefix',
                               default='P',
                               help='Gitlab label prefix for products')
        optionals.add_argument("--product-label-separator", dest='product_label_separator',
                               default=':',
                               help='seperator token of Gitlab label prefixes for products')

        subparsers = parser.add_subparsers(dest='command')
        mr_group = subparsers.add_parser('mr')
        changelog_group = subparsers.add_parser('changelog')

        subparsers = mr_group.add_subparsers(dest='action')
        ls_mr = subparsers.add_parser('ls')
        ls_mr.add_argument("--ids", dest='output_ids', action='store_true',
                           help='print MR ids only')
        ls_mr.add_argument("--wip",
                           help='search wip or not', choices=['yes', 'no'])
        ls_mr.add_argument("--state",
                           help='filter for the specified state',
                           choices=['all', 'opened', 'closed', 'locked', 'merged'],
                           default='merged')
        ls_mr.add_argument("--labels",
                           default='',
                           help='Comma separated list of labels to filter MRs for')
        update_mr = subparsers.add_parser('update')
        update_mr.add_argument('mr_ids', nargs='+',
                               help='one or more MR ids')
        update_mr.add_argument("--label",
                               help='put a speficic label ex: Feature')
        update_mr.add_argument("--tag",
                               help='put a speficic tag ex: 0.2.0')
        update_mr.add_argument("--replace-existing-labels", action='store_true',
                               help='replace labels')
        collect_mr = subparsers.add_parser('collect')
        collect_mr.add_argument('release_milestone',
                                help='milestone representing the release')
        collect_mr.add_argument('group_id',
                                help='ID of the group that sprint milestones belong to')
        collect_mr.add_argument('sprint_milestones', nargs='+',
                                help='one or more milestone titles representing sprints')

        subparsers = changelog_group.add_subparsers(dest='action')
        print_changelog = subparsers.add_parser('print',
                                                help='print changelog')
        print_changelog.add_argument("tag",
                                     help='generate changelog for specific tag ex: 0.2.0')
        push_changelog = subparsers.add_parser('push',
                                               help='Push changelog to releases in gitlab')
        push_changelog.add_argument("tag",
                                    help='generate changelog for specific tag ex: 0.2.0')
        arguments = parser.parse_args()

        if "command" in arguments:
            if arguments.command =="mr":
                if arguments.action == "update" and (not arguments.label and not arguments.tag):
                    update_mr.error("At least one of --label or --tag must be given")
                if arguments.action is None:
                    mr_group.error("One action is required")
            if arguments.command =="changelog":
                if arguments.action is None:
                    changelog_group.error("One action is required")
        else:
            parser.error("One command is needed")

    except argparse.ArgumentError as e:
        print("Error parsing arguments")
        raise e

    else:
        return arguments

if __name__ == '__main__':
    args = init_argparse()

    if not args.quiet:
        log.basicConfig(format=args.log_format, level=log.INFO)
    else:
        log.basicConfig(format=args.log_format)

    if args.gitlab_url is not None and args.gitlab_token is not None:
        gl = gitlab.Gitlab(args.gitlab_url, private_token=args.gitlab_token)
    else:
        try:
            gl = gitlab.Gitlab.from_config()
        except gitlab.config.GitlabConfigMissingError as e:
            print(e)
            exit()

    try:
        if args.project.isdecimal():
            projects = [gl.projects.get(args.project)]
        else:
            projects = gl.projects.list(search=args.project)
    except exceptions.MissingSchema:
        log.error("Error with the URL defined")
        exit()
    except gitlab.exceptions.GitlabAuthenticationError:
        log.error("Wrong private token")
        exit()
    if len(projects) != 1:
        print("can't find the project {}\n {}".format(args.project, projects))
        exit()
    project = projects[0]

    if not args.force:
        log.info("===== DRY RUN =====")

    if args.command == "mr":
        if args.action == "ls":
            list_mrs(project, args)
        if args.action == "update":
            update_mr(project, args)
        if args.action == "collect":
            group = None
            try:
                group = gl.groups.get(args.group_id)
            except exceptions.MissingSchema:
                log.error("Error with the URL defined")
                exit()
            except gitlab.exceptions.GitlabAuthenticationError:
                log.error("Wrong private token")
                exit()
            if group is None:
                log.error(f"Group {args.group_id} not found!")
                exit()
            collect_mr(group, project, args)
    if args.command == "changelog":
        push = False
        if args.action == "push":
            push = True
        if args.action == "print":
            print_changelog(project, args, push)

    if not args.force:
        log.info("===== DRY RUN =====")
